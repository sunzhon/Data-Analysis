#! /bin/zsh
# sim start

# 1) Define a function to change MNC (modular neural controller) rate in stbot.yaml
 function set_param()
 {

    file_name="$HOME/workspace/gorobots/projects/stbot/genesis/catkin_ws/src/stbot/config/stbot.yaml"
    file_name_new="$HOME/workspace/gorobots/projects/stbot/genesis/catkin_ws/src/stbot/config/stbot_new.yaml"
    file_name_old="$HOME/workspace/gorobots/projects/stbot/genesis/catkin_ws/src/stbot/config/stbot_old.yaml"
    mncrate=$1
    param_name=$1
    param_value=$2
    awk '{if($1 == "'$param_name'") $2 = "'$param_value'";print}' $file_name > $file_name_new && mv $file_name $file_name_old && mv $file_name_new $file_name 
    
    if [ -f "$file_name_old" ]; then
    rm $file_name_old
    fi
 }





 # 2) Main routine

# running times
if [ $# -gt 0 ]; then
    runs=$1
else
    runs=20
fi

echo "run ${runs} times"
# files
data_log_file_path=$HOME/workspace/experiment_data/datapath.log
data_log_file=$HOME/workspace/experiment_data/ExperimentDataLog.csv
echo "" > $data_log_file #create a experiment data log file 
rostopic pub --once /sim_control/floorRoughness std_msgs/Float32 "data: 0.0" # initialize the roughness to be zero



#for experiment_variable in 5 10 15 20 25 30 35 40 45 50 55 60
for experiment_variable in 5 10 15 20 25 30 35
do
    # modify ros rate
    $(set_param "RosRate:" $experiment_variable)
    for control_method in "phase_reset" "phase_modulation" "apnc";
    do

        if [ $control_method = "phase_reset" ]; then
            cpg_type=9 # phase reset
            threshold_value=0.4  #, this value is 0.4 for all case. The threshold for phase resetting. carrying load using 6.5, normal case using 5.0
            gain_value=0.0 #GRF feedback modulation gain
            echo "phase resetting"
        elif test $control_method = "phase_modulation" ; then
            cpg_type=8  # phase modulation is tegotae
            threshold_value=100  #The threshold for phase resetting. carrying load using 6.5, normal case using 5.0
            gain_value=0.03 #GRF feedback modulation gain
        elif [ $control_method = "apnc" ]; then
            cpg_type=5 # 5 is APC adaptive physical and neural commnications
            threshold_value=100  #The threshold for phase resetting. carrying load using 6.5, normal case using 5.0
            gain_value=0.0 #GRF feedback modulation gain
        else
            echo "CONTROL METHOD IS WRONG"
        fi

        experiment_class=$experiment_variable  # 0 roughness test, 1 walking speed test
        rougness_value=0.0
        roughness="\"data: $rougness_value\"" # 地面粗超度
        cpg_mi=0.08   # Modulation input, MI

        cmd="rostopic pub --once /sim_control/floorRoughness std_msgs/Float32 ${roughness}"
        for i in $(seq 1 $runs); do
            eval $cmd                            #publishing the roughness
            echo "Control method is $control_method, experiment category is : $experiment_class"
            #eval "rosparam set /RosRate ${experiment_class}"
            rostopic pub --once /sim_control/startSimulation std_msgs/Bool "data: true"
            eval "rosparam set /CPGMi ${cpg_mi}" # set CPG MI
            eval "rosparam set /CPGPGain ${gain_value}" #set CPG gain
            eval "rosparam set /CPGPThreshold ${threshold_value}" #set CPG threshild
            eval "rosparam set /CPGType ${cpg_type}" # 9 is PR, 8 is PM, 7 is  APNC (induce adaptive neural control input)
            if [ $control_method = "apnc" ]; then
                sleep 30
                eval "rosparam set /CPGType 7" # 7 is APNC (APC and ANC) (induce adaptive neural control input)
                sleep 40
            else
                sleep 70 #22 #32 #55 
            fi
            rostopic pub --once /sim_control/stopSimulation std_msgs/Bool "data: true"
            data_path_temp=$(cat $data_log_file_path)
            echo "$control_method\t$data_path_temp\t$experiment_class">> $data_log_file
        done
        sleep 4
    done
done 
echo "Experiments Done!"





